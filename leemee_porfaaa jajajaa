mira este es el perfecto esta y cumple con todo la pantalla tirene el scroll traqnuilo q baja pulesa raton a abajo y baja me entiendes 
package com.example.examen_womensecret

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Email
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CheckboxDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.RadioButtonDefaults
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.examen_womensecret.ui.theme.Examen_womensecretTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            Examen_womensecretTheme {
                var email by remember { mutableStateOf("") } // Estado compartido del email
                
                Scaffold(
                    topBar = { Superior() }
                ) { paddingValues ->
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(paddingValues)
                            .verticalScroll(rememberScrollState()),
                        verticalArrangement = Arrangement.Top
                    ) {
                        Cabecera()
                        fotos1()
                        fotos2()
                        texto1()
                        Email(email) { email = it }
                        radio()
                        Mischeckbox()
                        Buton(email)
                        Label()
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview
fun Superior() {
    TopAppBar(
        title = { Text("Faris Amine. Women´secret") },
        colors = TopAppBarDefaults.topAppBarColors(
            containerColor = Color.White,
            titleContentColor = Color.Black,
            navigationIconContentColor = Color.Black,
            actionIconContentColor = Color.Black
        ),
        navigationIcon = {
            IconButton(onClick = { }) {
                Icon(
                    imageVector = Icons.Filled.Search,
                    contentDescription = "Buscar",
                    tint = Color.Black
                )
            }
        },
        actions = {
            IconButton(onClick = {}) {
                Icon(
                    imageVector = Icons.Filled.Email,
                    contentDescription = "Email o gmail",
                    tint = Color.Black
                )
            }
        }
    )
}

@Composable
fun Cabecera() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .height(120.dp), // Aumentado de 65dp a 120dp
        horizontalArrangement = Arrangement.Center,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Image(
            painter = painterResource(id = R.drawable.imagen_1_arriba),
            contentDescription = "Foto cabecera",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.FillBounds
        )
    }
}

@Composable
fun fotos1() {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        Image(
            painter = painterResource(id = R.drawable.imagen_2izquierda),
            contentDescription = "foto1",
            modifier = Modifier
                .weight(1f)
                .height(150.dp), // Aumentado de 60dp a 150dp
            contentScale = ContentScale.Crop
        )
        Image(
            painter = painterResource(id = R.drawable.imagen_3_derecha),
            contentDescription = "foto2",
            modifier = Modifier
                .weight(1f)
                .height(150.dp), // Aumentado de 57dp a 150dp (igual que la otra)
            contentScale = ContentScale.Crop
        )
    }
}

@Composable
fun fotos2() {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        Image(
            painter = painterResource(id = R.drawable.imagen_4_izquierda),
            contentDescription = "foto 3",
            modifier = Modifier
                .weight(1f)
                .height(150.dp), // Aumentado de 57dp a 150dp
            contentScale = ContentScale.Crop
        )
        Image(
            painter = painterResource(id = R.drawable.imagen_5derechya),
            contentDescription = "foto4",
            modifier = Modifier
                .weight(1f)
                .height(150.dp), // Aumentado de 60dp a 150dp (igual que la otra)
            contentScale = ContentScale.Crop
        )
    }
}

@Composable
fun texto1() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 14.dp),
        horizontalArrangement = Arrangement.Center
    ) {
        Text(
            text = "Consigue un 10% en tu proxima compra",
            fontSize = 14.sp
        )
    }
}

@Composable
fun Email(email: String, onEmailChange: (String) -> Unit) {
    Row {
        TextField(
            value = email,
            onValueChange = onEmailChange,
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp)
                .border(1.dp, Color.Black, shape = MaterialTheme.shapes.small),
            placeholder = { Text("Introduce aquí tu email") },
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Email),
            singleLine = true,
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.Transparent,
                unfocusedContainerColor = Color.Transparent
            )
        )
    }
}

@Composable
fun radio() {
    var opcionElegida by remember { mutableStateOf("") }
    val opciones = listOf("Hombre", "Mujer")
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        Text(
            text = "Selecciona tu genero por favor:",
            modifier = Modifier.padding(bottom = 8.dp)
        )
        opciones.forEach { opcion ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(4.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                RadioButton(
                    selected = opcionElegida == opcion,
                    onClick = { opcionElegida = opcion },
                    colors = RadioButtonDefaults.colors(
                        selectedColor = Color.Blue,
                    )
                )
                Text(
                    text = opcion,
                    modifier = Modifier.padding(8.dp)
                )
            }
        }
    }
}

@Composable
fun Mischeckbox() {
    val opciones = remember {
        mutableStateListOf(
            Midataclass("Leer y aceptar las políticas de usuario", false),
            Midataclass("Deseo recibir información por email", false),
            Midataclass("acepto todas las cookies", false)
        )
    }
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp)
    ) {
        opciones.forEach { opcion ->
            FilaCheckbox(opcion)
        }
    }
}

@Composable
fun FilaCheckbox(opcion: Midataclass) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Checkbox(
            checked = opcion.isCheckedState.value,
            onCheckedChange = {
                opcion.isCheckedState.value = it
            },
            colors = CheckboxDefaults.colors(
                checkedColor = Color(0xFF3B5998),
                uncheckedColor = Color.Gray,
                checkmarkColor = Color.White
            )
        )
        Spacer(modifier = Modifier.width(8.dp))
        Text(text = opcion.title, fontSize = 14.sp, color = Color.Black)
    }
}

@Composable
fun Buton(email: String) {
    val isEmailValid = email.contains("@") && email.isNotEmpty()
    
    Button(
        onClick = {},
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp),
        enabled = isEmailValid,
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isEmailValid) Color(0xFF3B5998) else Color.Gray,
            disabledContainerColor = Color.Gray
        )
    ) {
        Text(
            "RECIBIR MI DESCUENTO",
            color = Color.White,
            fontSize = 13.sp,
        )
    }
}

@Composable
fun Label() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        HorizontalDivider(modifier = Modifier.weight(1f))
        Text(
            text = "Puedes cancelar la suscripción cuando quieras",
            modifier = Modifier.padding(horizontal = 8.dp),
            color = Color.Black,
            style = androidx.compose.ui.text.TextStyle(textDecoration = TextDecoration.Underline)
        )
        HorizontalDivider(modifier = Modifier.weight(1f))
    }
}



//la otra clase , es una dataclass. 
//si te da problemas lo de IconButton
// añade esta deèndencia implementation("androidx.compose.material:material-icons-core")
package com.example.examen_womensecret

import androidx.compose.runtime.mutableStateOf

data class Midataclass(val title: String, var isChecked: Boolean = false) {
    var isCheckedState = mutableStateOf(isChecked)
}


